/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * Localize Backend API
 * OpenAPI spec version: v1
 */
import { rest } from 'msw';
import { faker } from '@faker-js/faker';

export const getGetOrganisationsForUserMock = () => ({
    data: faker.helpers.arrayElement([
        Array.from(
            { length: faker.datatype.number({ min: 1, max: 10 }) },
            (_, i) => i + 1,
        ).map(() => ({
            id: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]),
            createdAt: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            modifiedAt: faker.helpers.arrayElement([
                `${faker.date.past().toISOString().split('.')[0]}Z`,
                undefined,
            ]),
            name: faker.helpers.arrayElement([faker.random.word(), undefined]),
            pictureUrl: faker.helpers.arrayElement([
                faker.helpers.arrayElement([faker.random.word(), null]),
                undefined,
            ]),
        })),
        undefined,
    ]),
    nbPages: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
    ]),
    page: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
    ]),
    size: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
    ]),
    totalAmount: faker.helpers.arrayElement([
        faker.datatype.number({ min: undefined, max: undefined }),
        undefined,
    ]),
});

export const getCreateOrganisationMock = () => ({
    id: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]),
    createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    modifiedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    name: faker.helpers.arrayElement([faker.random.word(), undefined]),
    pictureUrl: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.random.word(), null]),
        undefined,
    ]),
});

export const getGetOrganisationMock = () => ({
    id: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]),
    createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    modifiedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    name: faker.helpers.arrayElement([faker.random.word(), undefined]),
    pictureUrl: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.random.word(), null]),
        undefined,
    ]),
});

export const getUpdateOrganisationMock = () => ({
    id: faker.helpers.arrayElement([faker.datatype.uuid(), undefined]),
    createdAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    modifiedAt: faker.helpers.arrayElement([
        `${faker.date.past().toISOString().split('.')[0]}Z`,
        undefined,
    ]),
    name: faker.helpers.arrayElement([faker.random.word(), undefined]),
    pictureUrl: faker.helpers.arrayElement([
        faker.helpers.arrayElement([faker.random.word(), null]),
        undefined,
    ]),
});

export const getOrganisationsMSW = () => [
    rest.get('*/users/:userId/organisations', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetOrganisationsForUserMock()),
        );
    }),
    rest.post('*/organisations', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getCreateOrganisationMock()),
        );
    }),
    rest.get('*/organisations/:organisationId', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getGetOrganisationMock()),
        );
    }),
    rest.put('*/organisations/:organisationId', (_req, res, ctx) => {
        return res(
            ctx.delay(1000),
            ctx.status(200, 'Mocked status'),
            ctx.json(getUpdateOrganisationMock()),
        );
    }),
    rest.delete('*/organisations/:organisationId', (_req, res, ctx) => {
        return res(ctx.delay(1000), ctx.status(200, 'Mocked status'));
    }),
];
