/**
 * Generated by orval v6.11.0 🍺
 * Do not edit manually.
 * Localize Backend API
 * OpenAPI spec version: v1
 */
import type {
    MutationFunction,
    QueryFunction,
    QueryKey,
    UseMutationOptions,
    UseQueryOptions,
    UseQueryResult,
} from '@tanstack/react-query';
import { useMutation, useQuery } from '@tanstack/react-query';
import { customInstance } from '../config';
import type {
    CreateOrganisationDTO,
    GetOrganisationsForUserParams,
    OrganisationDTO,
    OrgnanisationPagingDTO,
    UpdateOrganisationDTO,
} from '../types';

/**
 * Returns the organisations for a user
 */
export const getOrganisationsForUser = (
    userId: string,
    params?: GetOrganisationsForUserParams,
    signal?: AbortSignal,
) => {
    return customInstance<OrgnanisationPagingDTO>({
        url: `/users/${userId}/organisations`,
        method: 'get',
        params,
        signal,
    });
};

export const getGetOrganisationsForUserQueryKey = (
    userId: string,
    params?: GetOrganisationsForUserParams,
) => [`/users/${userId}/organisations`, ...(params ? [params] : [])];

export type GetOrganisationsForUserQueryResult = NonNullable<
    Awaited<ReturnType<typeof getOrganisationsForUser>>
>;
export type GetOrganisationsForUserQueryError = unknown;

export const useGetOrganisationsForUser = <
    TData = Awaited<ReturnType<typeof getOrganisationsForUser>>,
    TError = unknown,
>(
    userId: string,
    params?: GetOrganisationsForUserParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getOrganisationsForUser>>,
            TError,
            TData
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ??
        getGetOrganisationsForUserQueryKey(userId, params);

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getOrganisationsForUser>>
    > = ({ signal }) => getOrganisationsForUser(userId, params, signal);

    const query = useQuery<
        Awaited<ReturnType<typeof getOrganisationsForUser>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!userId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryKey;

    return query;
};

/**
 * Create an organisation
 */
export const createOrganisation = (
    createOrganisationDTO: CreateOrganisationDTO,
) => {
    return customInstance<OrganisationDTO>({
        url: `/organisations`,
        method: 'post',
        headers: { 'Content-Type': 'application/json' },
        data: createOrganisationDTO,
    });
};

export type CreateOrganisationMutationResult = NonNullable<
    Awaited<ReturnType<typeof createOrganisation>>
>;
export type CreateOrganisationMutationBody = CreateOrganisationDTO;
export type CreateOrganisationMutationError = unknown;

export const useCreateOrganisation = <
    TError = unknown,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof createOrganisation>>,
        TError,
        { data: CreateOrganisationDTO },
        TContext
    >;
}) => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof createOrganisation>>,
        { data: CreateOrganisationDTO }
    > = (props) => {
        const { data } = props ?? {};

        return createOrganisation(data);
    };

    return useMutation<
        Awaited<ReturnType<typeof createOrganisation>>,
        TError,
        { data: CreateOrganisationDTO },
        TContext
    >(mutationFn, mutationOptions);
};
/**
 * Get an organisation
 */
export const getOrganisation = (
    organisationId: string,
    signal?: AbortSignal,
) => {
    return customInstance<OrganisationDTO>({
        url: `/organisations/${organisationId}`,
        method: 'get',
        signal,
    });
};

export const getGetOrganisationQueryKey = (organisationId: string) => [
    `/organisations/${organisationId}`,
];

export type GetOrganisationQueryResult = NonNullable<
    Awaited<ReturnType<typeof getOrganisation>>
>;
export type GetOrganisationQueryError = unknown;

export const useGetOrganisation = <
    TData = Awaited<ReturnType<typeof getOrganisation>>,
    TError = unknown,
>(
    organisationId: string,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getOrganisation>>,
            TError,
            TData
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ?? getGetOrganisationQueryKey(organisationId);

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getOrganisation>>
    > = ({ signal }) => getOrganisation(organisationId, signal);

    const query = useQuery<
        Awaited<ReturnType<typeof getOrganisation>>,
        TError,
        TData
    >(queryKey, queryFn, {
        enabled: !!organisationId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryKey;

    return query;
};

/**
 * Update an organisation
 */
export const updateOrganisation = (
    organisationId: string,
    updateOrganisationDTO: UpdateOrganisationDTO,
) => {
    return customInstance<OrganisationDTO>({
        url: `/organisations/${organisationId}`,
        method: 'put',
        headers: { 'Content-Type': 'application/json' },
        data: updateOrganisationDTO,
    });
};

export type UpdateOrganisationMutationResult = NonNullable<
    Awaited<ReturnType<typeof updateOrganisation>>
>;
export type UpdateOrganisationMutationBody = UpdateOrganisationDTO;
export type UpdateOrganisationMutationError = unknown;

export const useUpdateOrganisation = <
    TError = unknown,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof updateOrganisation>>,
        TError,
        { organisationId: string; data: UpdateOrganisationDTO },
        TContext
    >;
}) => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof updateOrganisation>>,
        { organisationId: string; data: UpdateOrganisationDTO }
    > = (props) => {
        const { organisationId, data } = props ?? {};

        return updateOrganisation(organisationId, data);
    };

    return useMutation<
        Awaited<ReturnType<typeof updateOrganisation>>,
        TError,
        { organisationId: string; data: UpdateOrganisationDTO },
        TContext
    >(mutationFn, mutationOptions);
};
/**
 * Delete an organisation
 */
export const deleteOrganisation = (organisationId: string) => {
    return customInstance<void>({
        url: `/organisations/${organisationId}`,
        method: 'delete',
    });
};

export type DeleteOrganisationMutationResult = NonNullable<
    Awaited<ReturnType<typeof deleteOrganisation>>
>;

export type DeleteOrganisationMutationError = unknown;

export const useDeleteOrganisation = <
    TError = unknown,
    TContext = unknown,
>(options?: {
    mutation?: UseMutationOptions<
        Awaited<ReturnType<typeof deleteOrganisation>>,
        TError,
        { organisationId: string },
        TContext
    >;
}) => {
    const { mutation: mutationOptions } = options ?? {};

    const mutationFn: MutationFunction<
        Awaited<ReturnType<typeof deleteOrganisation>>,
        { organisationId: string }
    > = (props) => {
        const { organisationId } = props ?? {};

        return deleteOrganisation(organisationId);
    };

    return useMutation<
        Awaited<ReturnType<typeof deleteOrganisation>>,
        TError,
        { organisationId: string },
        TContext
    >(mutationFn, mutationOptions);
};
