/**
 * Generated by orval v6.13.1 üç∫
 * Do not edit manually.
 * Localize Backend API
 * OpenAPI spec version: v1
 */
import { useQuery, useInfiniteQuery } from '@tanstack/react-query';
import type {
    UseQueryOptions,
    UseInfiniteQueryOptions,
    QueryFunction,
    UseQueryResult,
    UseInfiniteQueryResult,
    QueryKey,
} from '@tanstack/react-query';
import type { LanguagePagingDTO, GetProjectLanguagesParams } from '.././types';
import { customInstance } from '.././config';

type AwaitedInput<T> = PromiseLike<T> | T;

type Awaited<O> = O extends AwaitedInput<infer T> ? T : never;

/**
 * Get the languages of a project
 */
export const getProjectLanguages = (
    projectId: string,
    params?: GetProjectLanguagesParams,
    signal?: AbortSignal,
) => {
    return customInstance<LanguagePagingDTO>({
        url: `/projects/${projectId}/languages`,
        method: 'get',
        params,
        signal,
    });
};

export const getGetProjectLanguagesQueryKey = (
    projectId: string,
    params?: GetProjectLanguagesParams,
) => [`/projects/${projectId}/languages`, ...(params ? [params] : [])] as const;

export type GetProjectLanguagesInfiniteQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectLanguages>>
>;
export type GetProjectLanguagesInfiniteQueryError = unknown;

export const useGetProjectLanguagesInfinite = <
    TData = Awaited<ReturnType<typeof getProjectLanguages>>,
    TError = unknown,
>(
    projectId: string,
    params?: GetProjectLanguagesParams,
    options?: {
        query?: UseInfiniteQueryOptions<
            Awaited<ReturnType<typeof getProjectLanguages>>,
            TError,
            TData
        >;
    },
): UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ??
        getGetProjectLanguagesQueryKey(projectId, params);

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getProjectLanguages>>
    > = ({ signal, pageParam }) =>
        getProjectLanguages(projectId, { page: pageParam, ...params }, signal);

    const query = useInfiniteQuery<
        Awaited<ReturnType<typeof getProjectLanguages>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!projectId,
        ...queryOptions,
    }) as UseInfiniteQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryKey;

    return query;
};

export type GetProjectLanguagesQueryResult = NonNullable<
    Awaited<ReturnType<typeof getProjectLanguages>>
>;
export type GetProjectLanguagesQueryError = unknown;

export const useGetProjectLanguages = <
    TData = Awaited<ReturnType<typeof getProjectLanguages>>,
    TError = unknown,
>(
    projectId: string,
    params?: GetProjectLanguagesParams,
    options?: {
        query?: UseQueryOptions<
            Awaited<ReturnType<typeof getProjectLanguages>>,
            TError,
            TData
        >;
    },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
    const { query: queryOptions } = options ?? {};

    const queryKey =
        queryOptions?.queryKey ??
        getGetProjectLanguagesQueryKey(projectId, params);

    const queryFn: QueryFunction<
        Awaited<ReturnType<typeof getProjectLanguages>>
    > = ({ signal }) => getProjectLanguages(projectId, params, signal);

    const query = useQuery<
        Awaited<ReturnType<typeof getProjectLanguages>>,
        TError,
        TData
    >({
        queryKey,
        queryFn,
        enabled: !!projectId,
        ...queryOptions,
    }) as UseQueryResult<TData, TError> & { queryKey: QueryKey };

    query.queryKey = queryKey;

    return query;
};
